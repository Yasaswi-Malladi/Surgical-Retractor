import utime
from machine import Pin, I2C
from vl53l0x import VL53L0X
import time
buzz1 = Pin(26, Pin.OUT) ; buzz1.off()
led1  = Pin(27, Pin.OUT) ; led1.off()
# === Configurable Parameters ===
MOVING_AVG_WINDOW = 5
FORCE_CHANGE_THRESHOLD = 10  # grams
SCALE_FACTOR = 100  # adjust after calibration
TRIM_PERCENTAGE = 0.2  # For trimmed mean

# === Hardware Setup ===
dout = Pin(5, Pin.IN)
sck = Pin(4, Pin.OUT)
sck.value(0)

led_red = Pin(15, Pin.OUT)
led_green = Pin(14, Pin.OUT)
led_blue = Pin(13, Pin.OUT)
led_red.value(1)
led_green.value(1)
led_blue.value(1)

def set_led_purple():
    led_red.value(1)
    led_green.value(0)
    led_blue.value(1)
def set_led_red():
    led_red.value(1)
    led_green.value(0)
    led_blue.value(0)

def led_off():
    led_red.value(0)
    led_green.value(0)
    led_blue.value(0)

def wait_for_tof_sensor(i2c):
    while not i2c.scan():
        time.sleep(0.5)

def setup_tof():
    sda = Pin(0)
    scl = Pin(1)
    i2c = I2C(id=0, sda=sda, scl=scl)
    wait_for_tof_sensor(i2c)
    tof = VL53L0X(i2c)
    tof.set_measurement_timing_budget(40000)
    tof.set_Vcsel_pulse_period(tof.vcsel_period_type[0], 12)
    tof.set_Vcsel_pulse_period(tof.vcsel_period_type[1], 8)
    return tof

def read_distance(tof):
    return tof.ping() - 15

def read_hx711():
    while dout.value() == 1:
        utime.sleep_us(10)
    count = 0
    for _ in range(24):
        sck.value(1)
        utime.sleep_us(2)
        count = count << 1
        sck.value(0)
        utime.sleep_us(2)
        if dout.value():
            count += 1
    sck.value(1)
    utime.sleep_us(10)
    sck.value(0)
    utime.sleep_us(10)
    if count & 0x800000:
        count |= ~0xffffff
    return count

def trimmed_mean(buffer, trim_fraction=TRIM_PERCENTAGE):
    if not buffer:
        return 0
    sorted_vals = sorted(buffer)
    trim_n = int(len(sorted_vals) * trim_fraction)
    trimmed = sorted_vals[trim_n:len(sorted_vals)-trim_n]
    if not trimmed:
        return sum(sorted_vals) / len(sorted_vals)
    return sum(trimmed) / len(trimmed)

# === Initialization ===
led_off()
print("Taring... Remove any weight.")
utime.sleep(2)
zero_offset = read_hx711()
print("Tared. Zero offset =", zero_offset)

tof = setup_tof()

force_buffer = []
distance_buffer = []

baseline_force = None
baseline_distance = None
stable_initialized = False
last_log_time = utime.ticks_ms()

gradients = []

# Gradient detection state
unstable_detected = False
unstable_start_time = None
led_ready = False

csv_filename = "data_log.csv"
with open(csv_filename, "w") as f:
    f.write("timestamp_ms,grams,distance_mm,gradient\n")

# === Main Loop ===
while True:
    raw_val = read_hx711()
    net_val = raw_val - zero_offset
    grams = net_val / SCALE_FACTOR
    distance = read_distance(tof)

    force_buffer.append(grams)
    distance_buffer.append(distance)

    if len(force_buffer) > MOVING_AVG_WINDOW:
        force_buffer.pop(0)
        distance_buffer.pop(0)

    if len(force_buffer) == MOVING_AVG_WINDOW:
        avg_force = trimmed_mean(force_buffer)
        avg_distance = trimmed_mean(distance_buffer)

        now = utime.ticks_ms()
        if utime.ticks_diff(now, last_log_time) >= 1000:
            print("Time:", now, "Avg Grams:", avg_force, "Avg Distance:", avg_distance)
            last_log_time = now

        if not stable_initialized:
            baseline_force = avg_force
            baseline_distance = avg_distance
            stable_initialized = True
        else:
            force_change = abs(avg_force - baseline_force)
            if force_change > FORCE_CHANGE_THRESHOLD:
                print("Significant force change detected. Waiting 3 seconds...")
                utime.sleep(3)

                # Capture new stable averages after wait
                post_force_vals = []
                post_dist_vals = []
                for _ in range(MOVING_AVG_WINDOW):
                    raw_val = read_hx711()
                    net_val = raw_val - zero_offset
                    post_force_vals.append(net_val / SCALE_FACTOR)
                    post_dist_vals.append(read_distance(tof))
                    utime.sleep(0.1)

                new_avg_force = trimmed_mean(post_force_vals)
                new_avg_distance = trimmed_mean(post_dist_vals)

                delta_force = new_avg_force - baseline_force
                delta_dist = new_avg_distance - baseline_distance
                gradient = delta_force / delta_dist if delta_dist != 0 else 0
                gradients.append(gradient)

                current_time = utime.ticks_ms()

                # === Gradient change logic ===
                if abs(gradient) > 20 and not unstable_detected:
                    print("Unstable gradient detected — starting 10s wait.")
                    unstable_detected = True
                    unstable_start_time = current_time
                    led_ready = False
                    led_off()

                if unstable_detected:
                    print("LED TURINING RED IN 10 SECONDS")
                    time.sleep(0.25)
                    elapsed = utime.ticks_diff(current_time, unstable_start_time)
                    if elapsed >= 10000:
                        print("10s elapsed since large gradient.")
                        if abs(gradient) < 2 and gradient != 0:
                            print("Gradient has settled. Turning on LED.")
                            set_led_red()
                            led_ready = True
                        else:
                            print("Gradient still unstable after 10s. Staying off.")
                            led_off()
                    else:
                        print("Waiting... Gradient not yet settled.")
                        led_off()
                else:
                    # Normal condition – LED only turns on if gradient > 8
                    if abs(avg_force) > 50 and not led_ready:
                        #set_led_purple()
                        time.sleep(0.01)
                    else:
                        led_off()

                timestamp = utime.ticks_ms()
                print("Time:", timestamp, "ΔForce:", delta_force, "ΔDistance:", delta_dist, "Gradient:", gradient)

                try:
                    with open(csv_filename, "a") as f:
                        line = "{},{:.3f},{:.1f},{:.3f}\n".format(timestamp, new_avg_force, new_avg_distance, gradient)
                        f.write(line)
                except Exception as e:
                    print("Error writing CSV:", e)

                # Update baseline *after* gradient
                baseline_force = new_avg_force
                baseline_distance = new_avg_distance

    utime.sleep(0.1)

